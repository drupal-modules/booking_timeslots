<?php
// $Id$

/**
 * @file
 * Allows users to select an available calendar time slot to book.
 */

/**
 * Implementation of hook_menu().
 *
 */
function booking_timeslots_menu() {
  $items['admin/settings/booking_timeslots'] = array(
    'title' => 'Booking Timeslots',
    'description' => 'Manage booking timeslots.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('booking_timeslots_settings_form'),
    'access arguments' => array('administer booking timeslots'),
    'file' => 'booking_timeslots.admin.inc',
  );

  return $items;
}


function booking_timeslots_perm() {
  $permissions = array(
    'administer booking timeslots',
    'edit booking dates',
  );
  
  return $permissions;
}

/**
 * Implementation of hook_form_alter().
 */
function booking_timeslots_form_alter(&$form, $form_state, $form_id) {
  $my_form_id = variable_get('booking_timeslot_form_id', ''); // get content type used for booking timeslots
  if (!empty($my_form_id)) {
    module_load_include('inc', 'booking_timeslots');
    switch ($form_id) {
        case $my_form_id.'_node_form':
            drupal_add_js(drupal_get_path('module', 'booking_timeslots') . '/booking_timeslots.js');
            if (!user_access('edit booking dates')) {
            drupal_add_js("
                $(document).ready(function() {
                    $('.container-inline-date').parent().hide();
                })
            ", 'inline'); // hide input date form
            }
            $fieldname = variable_get('booking_timeslot_field_name', '');
            if (!empty($fieldname)) {
                $last_arg = booking_timeslots_get_last_path_arg();
                $datetime = $form[$fieldname][0]['#default_value']['value'];
                if (!empty($last_arg)) {
                  if (booking_timeslots_valid_datetime($last_arg)) {
                    $form[$fieldname][0]['#default_value']['value'] = $datetime = $last_arg;
                  }
                }
                if (!empty($datetime)) {
                  $date_after = booking_timeslots_add_time($datetime, array('hour' => variable_get('booking_timeslot_interval_hours', 1), 'minute' => variable_get('booking_timeslot_interval_minutes', 30)));
                  $form[$fieldname][0]['#default_value']['value2'] = $date_after;
                }
                $form['#validate'] = array('booking_timeslots_validate');
            } else if (user_access('administer booking timeslots')) {
                $link = '/admin/settings/booking_timeslots'; // FIXME: change path to relative one (to support website prefixes)
                drupal_set_message(t('Please choose the field on the <a href="@url">Settings page</a>.', array('@url' => $link)));
            }
        break;
        }
  }
}

/**
 * Validate callback.
 */
function booking_timeslots_validate($form, &$form_state) {
  module_load_include('inc', 'booking_timeslots');
  $fieldname = variable_get('booking_timeslot_field_name', '');
  $date1 = $form[$fieldname][0]['#value']['value']['date'];
  $time1 = $form[$fieldname][0]['#value']['value']['time'];
  $date2 = &$form[$fieldname][0]['#value']['value2']['date'];
  $time2 = &$form[$fieldname][0]['#value']['value2']['time'];
  //form_set_value($form[$fieldname][0]['#value']['value2'], array('date' => $date2, 'time' => $time1), $form_state); // set the same date of end event
  /* TODO */
}

/**
 * Validate datetime
 *
 * @param $datetime
 *      datetime to check (in `yyyy-mm-dd hh-mm-ss` format)
 * @return
 *      TRUE if datetime is in valid format
 */
function booking_timeslots_valid_datetime($datetime) {
  return preg_match("/^([0-9]{2,4})-([0-1]?[0-9])-([0-3]?[0-9]) (?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$/", $datetime);
}
