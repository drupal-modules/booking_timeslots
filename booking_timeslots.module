<?php

/**
 * @file
 *   Allows users to select an available calendar time slot to book.
 *
 * @version
 *
 * @developers
 *   Rafal Wieczorek <kenorb@gmail.com>
 */

/**
 * Implementation of hook_menu().
 *
 */
function booking_timeslots_menu() {
  $items['admin/settings/booking_timeslots/timeslots_settings'] = array(
    'title' => t('Timeslot settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ); 
  $items['admin/settings/booking_timeslots'] = array(
    'title' => t('Booking Timeslots Settings'),
    'description' => t('Manage booking timeslots.'),
    'page callback' => 'drupal_get_form',
    'access callback' => 'booking_timeslots_access',
    'page arguments' => array('booking_timeslots_settings_timeslots_form'),
    'file' => 'booking_timeslots.admin.inc',
  );
  $items['admin/settings/booking_timeslots/form_settings'] = array(
    'title' => t('Form Settings'),
    'description' => t('Manage form settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('booking_timeslots_settings_form'),
    'access arguments' => array('administer booking timeslots'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'booking_timeslots.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function booking_timeslots_perm() {
  $permissions = array(
    'administer booking timeslots',
    'edit booking dates',
    'show booking dates',
    'edit timeslot settings',
  );
  return $permissions;
}

/**
 * Menu item access callback - only admin or user with proper privileges can access it
 */
function booking_timeslots_access() {
  return user_access('administer booking timeslots') || user_access('edit timeslot settings');
}


/**
 * Implementation of hook_form_alter().
 */
function booking_timeslots_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, '_node_form') !== FALSE) {
    $booking_active = FALSE;
    $content_type = str_replace('_node_form', '', $form_id); // convert name to plain content type name
    $fieldnames = array_flip(variable_get('booking_timeslot_fields', array('field_booking_slot' => 'field_booking_slot')));
    module_load_include('inc', 'booking_timeslots');
    foreach ($fieldnames as $fieldname => $value) {
      if (isset($form[$fieldname])) {
        $last_arg = end(arg());
        $start_date = arg(3);
        $end_date = arg(4);
        $datetime = $form[$fieldname][0]['#default_value']['value'];
        if (!empty($start_date)) {
        if (booking_timeslots_valid_datetime($start_date)) {
            $form[$fieldname][0]['#default_value']['value'] = $datetime = $start_date;
          }
        }
        if (!empty($datetime)) {
          $date_after = booking_timeslots_add_time($datetime, array('hour' => variable_get('booking_timeslot_length_hours', 1), 'minute' => variable_get('booking_timeslot_length_minutes', 0)));
          $form[$fieldname][0]['#default_value']['value2'] = $date_after;
        }
        if (booking_timeslots_valid_datetime($end_date) && !empty($end_date)) {
          $form[$fieldname][0]['#default_value']['value2'] = $end_date;
        }
        $form['#validate'][] = 'booking_timeslots_validate';
        $form['buttons']['submit']['#value'] = t('Book Now');
        $booking_active = TRUE;
      }
    }
    if ($booking_active) {
      drupal_add_js(drupal_get_path('module', 'booking_timeslots') . '/booking_timeslots.js');
      if (!user_access('edit booking dates')) {
        drupal_add_js("$(document).ready(function() { $('.container-inline-date').parent().hide(); })", 'inline'); // hide input date form
      }
    }
  }
}

/**
 * Form validate callback.
 */
function booking_timeslots_validate($form, &$form_state) {
  module_load_include('inc', 'booking_timeslots');
  drupal_add_js(drupal_get_path('module', 'booking_timeslots') . '/booking_timeslots.js');
  if (!user_access('edit booking dates')) {
    drupal_add_js("$(document).ready(function() { $('.container-inline-date').parent().hide(); })", 'inline'); // hide input date form
  }
  $fieldnames = array_flip(variable_get('booking_timeslot_fields', array('field_booking_slot' => 'field_booking_slot')));
  foreach ($fieldnames as $fieldname => $value) {
      
    if (isset($form_state['values'][$fieldname])) {
      $date1 = $form_state['values'][$fieldname][0]['value'];
      $date2 = $form_state['values'][$fieldname][0]['value2'];
      break;
    }
    // Form Data: field_timeslot%5B0%5D%5Bvalue%5D%5Bdate%5D:Dec 15 2010 - 11am
  }

  // TODO: validate if the slot length is equal to settings (booking_timeslot_length_hours & booking_timeslot_length_minutes)
  $nid = $form['nid']['#value'];
  
  if (empty($nid) && is_array($date1) && !booking_timeslots_check_slot_availability($date1, $form['type']['#value'], array($form, $form_state))) {
    form_set_error('code', t('Sorry, this slot is unavailable.'));
  }
}

/**
 * Implementation of hook_theme_registry_alter().
 * Adds our own preprocess functions to some templates.
 */
function booking_timeslots_theme_registry_alter(&$items) {
  $items['calendar_month']['preprocess functions'][] = 'template_preprocess_booking_timeslots_month';
  $items['calendar_month']['include files'][] = './' . drupal_get_path('module', 'booking_timeslots') . '/booking_timeslots.theme.inc';

  $items['calendar_week']['preprocess functions'][] = 'template_preprocess_booking_timeslots_week';
  $items['calendar_week']['include files'][] = './' . drupal_get_path('module', 'booking_timeslots') . '/booking_timeslots.theme.inc';

  $items['calendar_day']['preprocess functions'][] = 'template_preprocess_booking_timeslots_day';
  $items['calendar_day']['include files'][] = './' . drupal_get_path('module', 'booking_timeslots') . '/booking_timeslots.theme.inc';

  /* TODO: Find the right template
        $plugin = $this->get_plugin();
        if ($plugin) {
          $funcs[] = $this->option_link(t('Style output'), 'analyze-theme-style') . ': ' . $this->format_themes($plugin->theme_functions(), $plugin->additional_theme_functions());
          $themes = $plugin->additional_theme_functions();
          if ($themes) {
            foreach ($themes as $theme) {
              $funcs[] = $this->option_link(t('Alternative style'), 'analyze-theme-style') . ': '  . $this->format_themes($theme);
            }
          }
*/

  // Other theme callbacks:
  //   calendar_month_multiple_node, calendar_week_multiple_node, calendar_datebox, calendar_date_combo, calendar_empty_day, calendar_stripe_legend, calendar_stripe_stripe, calendar_colorpicker, calendar_colorfield, calendar_time_row_heading
}

